// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.alliance.sam;

import com.alliance.sam.Expediente;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Expediente_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Expediente.entityManager;
    
    public static final List<String> Expediente.fieldNames4OrderClauseFilter = java.util.Arrays.asList("");
    
    public static final EntityManager Expediente.entityManager() {
        EntityManager em = new Expediente().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Expediente.countExpedientes() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Expediente o", Long.class).getSingleResult();
    }
    
    public static List<Expediente> Expediente.findAllExpedientes() {
        return entityManager().createQuery("SELECT o FROM Expediente o", Expediente.class).getResultList();
    }
    
    public static List<Expediente> Expediente.findAllExpedientes(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Expediente o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Expediente.class).getResultList();
    }
    
    public static Expediente Expediente.findExpediente(Long idExpedienteControl) {
        if (idExpedienteControl == null) return null;
        return entityManager().find(Expediente.class, idExpedienteControl);
    }
    
    public static List<Expediente> Expediente.findExpedienteEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Expediente o", Expediente.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<Expediente> Expediente.findExpedienteEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Expediente o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Expediente.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Expediente.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Expediente.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Expediente attached = Expediente.findExpediente(this.idExpedienteControl);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Expediente.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Expediente.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Expediente Expediente.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Expediente merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
