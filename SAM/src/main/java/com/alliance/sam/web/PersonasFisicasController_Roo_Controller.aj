// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.alliance.sam.web;

import com.alliance.sam.DocumentoPersonaFisica;
import com.alliance.sam.DomicilioPersonaFisica;
import com.alliance.sam.ExpedientePersonaFisica;
import com.alliance.sam.PersonaFisicaJuridica;
import com.alliance.sam.PersonasFisicas;
import com.alliance.sam.PersonasFisicasContacto;
import com.alliance.sam.TipoDocumento;
import com.alliance.sam.TipoIva;
import com.alliance.sam.TipoPersona;
import com.alliance.sam.web.PersonasFisicasController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect PersonasFisicasController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String PersonasFisicasController.create(@Valid PersonasFisicas personasFisicas, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, personasFisicas);
            return "personasfisicases/create";
        }
        uiModel.asMap().clear();
        personasFisicas.persist();
        return "redirect:/personasfisicases/" + encodeUrlPathSegment(personasFisicas.getIdPersonaFisica().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String PersonasFisicasController.createForm(Model uiModel) {
        populateEditForm(uiModel, new PersonasFisicas());
        return "personasfisicases/create";
    }
    
    @RequestMapping(value = "/{idPersonaFisica}", produces = "text/html")
    public String PersonasFisicasController.show(@PathVariable("idPersonaFisica") Integer idPersonaFisica, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("personasfisicas", PersonasFisicas.findPersonasFisicas(idPersonaFisica));
        uiModel.addAttribute("itemId", idPersonaFisica);
        return "personasfisicases/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String PersonasFisicasController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("personasfisicases", PersonasFisicas.findPersonasFisicasEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) PersonasFisicas.countPersonasFisicases() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("personasfisicases", PersonasFisicas.findAllPersonasFisicases(sortFieldName, sortOrder));
        }
        addDateTimeFormatPatterns(uiModel);
        return "personasfisicases/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String PersonasFisicasController.update(@Valid PersonasFisicas personasFisicas, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, personasFisicas);
            return "personasfisicases/update";
        }
        uiModel.asMap().clear();
        personasFisicas.merge();
        return "redirect:/personasfisicases/" + encodeUrlPathSegment(personasFisicas.getIdPersonaFisica().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{idPersonaFisica}", params = "form", produces = "text/html")
    public String PersonasFisicasController.updateForm(@PathVariable("idPersonaFisica") Integer idPersonaFisica, Model uiModel) {
        populateEditForm(uiModel, PersonasFisicas.findPersonasFisicas(idPersonaFisica));
        return "personasfisicases/update";
    }
    
    @RequestMapping(value = "/{idPersonaFisica}", method = RequestMethod.DELETE, produces = "text/html")
    public String PersonasFisicasController.delete(@PathVariable("idPersonaFisica") Integer idPersonaFisica, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        PersonasFisicas personasFisicas = PersonasFisicas.findPersonasFisicas(idPersonaFisica);
        personasFisicas.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/personasfisicases";
    }
    
    void PersonasFisicasController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("personasFisicas_fechanacimiento_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("personasFisicas_fechacreacion_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("personasFisicas_fechamodificacion_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void PersonasFisicasController.populateEditForm(Model uiModel, PersonasFisicas personasFisicas) {
        uiModel.addAttribute("personasFisicas", personasFisicas);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("documentopersonafisicas", DocumentoPersonaFisica.findAllDocumentoPersonaFisicas());
        uiModel.addAttribute("domiciliopersonafisicas", DomicilioPersonaFisica.findAllDomicilioPersonaFisicas());
        uiModel.addAttribute("expedientepersonafisicas", ExpedientePersonaFisica.findAllExpedientePersonaFisicas());
        uiModel.addAttribute("personafisicajuridicas", PersonaFisicaJuridica.findAllPersonaFisicaJuridicas());
        uiModel.addAttribute("personasfisicascontactoes", PersonasFisicasContacto.findAllPersonasFisicasContactoes());
        uiModel.addAttribute("tipodocumentoes", TipoDocumento.findAllTipoDocumentoes());
        uiModel.addAttribute("tipoivas", TipoIva.findAllTipoIvas());
        uiModel.addAttribute("tipopersonas", TipoPersona.findAllTipoPersonas());
    }
    
    String PersonasFisicasController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
