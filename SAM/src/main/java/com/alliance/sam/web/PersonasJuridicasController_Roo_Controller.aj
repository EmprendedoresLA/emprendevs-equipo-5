// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.alliance.sam.web;

import com.alliance.sam.DocumentoPersonaJuridica;
import com.alliance.sam.DomicilioPersonaJuridica;
import com.alliance.sam.ExpedientePersonaJuridica;
import com.alliance.sam.PersonaFisicaJuridica;
import com.alliance.sam.PersonasJuridicas;
import com.alliance.sam.PersonasJuridicasContacto;
import com.alliance.sam.PersonasJuridicasUte;
import com.alliance.sam.TipoIva;
import com.alliance.sam.TipoPersona;
import com.alliance.sam.web.PersonasJuridicasController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect PersonasJuridicasController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String PersonasJuridicasController.create(@Valid PersonasJuridicas personasJuridicas, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, personasJuridicas);
            return "personasjuridicases/create";
        }
        uiModel.asMap().clear();
        personasJuridicas.persist();
        return "redirect:/personasjuridicases/" + encodeUrlPathSegment(personasJuridicas.getIdPersonaJuridica().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String PersonasJuridicasController.createForm(Model uiModel) {
        populateEditForm(uiModel, new PersonasJuridicas());
        return "personasjuridicases/create";
    }
    
    @RequestMapping(value = "/{idPersonaJuridica}", produces = "text/html")
    public String PersonasJuridicasController.show(@PathVariable("idPersonaJuridica") Integer idPersonaJuridica, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("personasjuridicas", PersonasJuridicas.findPersonasJuridicas(idPersonaJuridica));
        uiModel.addAttribute("itemId", idPersonaJuridica);
        return "personasjuridicases/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String PersonasJuridicasController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("personasjuridicases", PersonasJuridicas.findPersonasJuridicasEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) PersonasJuridicas.countPersonasJuridicases() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("personasjuridicases", PersonasJuridicas.findAllPersonasJuridicases(sortFieldName, sortOrder));
        }
        addDateTimeFormatPatterns(uiModel);
        return "personasjuridicases/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String PersonasJuridicasController.update(@Valid PersonasJuridicas personasJuridicas, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, personasJuridicas);
            return "personasjuridicases/update";
        }
        uiModel.asMap().clear();
        personasJuridicas.merge();
        return "redirect:/personasjuridicases/" + encodeUrlPathSegment(personasJuridicas.getIdPersonaJuridica().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{idPersonaJuridica}", params = "form", produces = "text/html")
    public String PersonasJuridicasController.updateForm(@PathVariable("idPersonaJuridica") Integer idPersonaJuridica, Model uiModel) {
        populateEditForm(uiModel, PersonasJuridicas.findPersonasJuridicas(idPersonaJuridica));
        return "personasjuridicases/update";
    }
    
    @RequestMapping(value = "/{idPersonaJuridica}", method = RequestMethod.DELETE, produces = "text/html")
    public String PersonasJuridicasController.delete(@PathVariable("idPersonaJuridica") Integer idPersonaJuridica, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        PersonasJuridicas personasJuridicas = PersonasJuridicas.findPersonasJuridicas(idPersonaJuridica);
        personasJuridicas.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/personasjuridicases";
    }
    
    void PersonasJuridicasController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("personasJuridicas_fechainicioactividad_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("personasJuridicas_fechacreacion_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("personasJuridicas_fechamodificacion_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void PersonasJuridicasController.populateEditForm(Model uiModel, PersonasJuridicas personasJuridicas) {
        uiModel.addAttribute("personasJuridicas", personasJuridicas);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("documentopersonajuridicas", DocumentoPersonaJuridica.findAllDocumentoPersonaJuridicas());
        uiModel.addAttribute("domiciliopersonajuridicas", DomicilioPersonaJuridica.findAllDomicilioPersonaJuridicas());
        uiModel.addAttribute("expedientepersonajuridicas", ExpedientePersonaJuridica.findAllExpedientePersonaJuridicas());
        uiModel.addAttribute("personafisicajuridicas", PersonaFisicaJuridica.findAllPersonaFisicaJuridicas());
        uiModel.addAttribute("personasjuridicascontactoes", PersonasJuridicasContacto.findAllPersonasJuridicasContactoes());
        uiModel.addAttribute("personasjuridicasutes", PersonasJuridicasUte.findAllPersonasJuridicasUtes());
        uiModel.addAttribute("tipoivas", TipoIva.findAllTipoIvas());
        uiModel.addAttribute("tipopersonas", TipoPersona.findAllTipoPersonas());
    }
    
    String PersonasJuridicasController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
