// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.alliance.sam.web;

import com.alliance.sam.DocumentoPersonaJuridica;
import com.alliance.sam.PersonasJuridicas;
import com.alliance.sam.TipoDocumento;
import com.alliance.sam.web.DocumentoPersonaJuridicaController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect DocumentoPersonaJuridicaController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String DocumentoPersonaJuridicaController.create(@Valid DocumentoPersonaJuridica documentoPersonaJuridica, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, documentoPersonaJuridica);
            return "documentopersonajuridicas/create";
        }
        uiModel.asMap().clear();
        documentoPersonaJuridica.persist();
        return "redirect:/documentopersonajuridicas/" + encodeUrlPathSegment(documentoPersonaJuridica.getIdDocumentoPersonaJuridica().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String DocumentoPersonaJuridicaController.createForm(Model uiModel) {
        populateEditForm(uiModel, new DocumentoPersonaJuridica());
        return "documentopersonajuridicas/create";
    }
    
    @RequestMapping(value = "/{idDocumentoPersonaJuridica}", produces = "text/html")
    public String DocumentoPersonaJuridicaController.show(@PathVariable("idDocumentoPersonaJuridica") Long idDocumentoPersonaJuridica, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("documentopersonajuridica", DocumentoPersonaJuridica.findDocumentoPersonaJuridica(idDocumentoPersonaJuridica));
        uiModel.addAttribute("itemId", idDocumentoPersonaJuridica);
        return "documentopersonajuridicas/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String DocumentoPersonaJuridicaController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("documentopersonajuridicas", DocumentoPersonaJuridica.findDocumentoPersonaJuridicaEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) DocumentoPersonaJuridica.countDocumentoPersonaJuridicas() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("documentopersonajuridicas", DocumentoPersonaJuridica.findAllDocumentoPersonaJuridicas(sortFieldName, sortOrder));
        }
        addDateTimeFormatPatterns(uiModel);
        return "documentopersonajuridicas/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String DocumentoPersonaJuridicaController.update(@Valid DocumentoPersonaJuridica documentoPersonaJuridica, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, documentoPersonaJuridica);
            return "documentopersonajuridicas/update";
        }
        uiModel.asMap().clear();
        documentoPersonaJuridica.merge();
        return "redirect:/documentopersonajuridicas/" + encodeUrlPathSegment(documentoPersonaJuridica.getIdDocumentoPersonaJuridica().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{idDocumentoPersonaJuridica}", params = "form", produces = "text/html")
    public String DocumentoPersonaJuridicaController.updateForm(@PathVariable("idDocumentoPersonaJuridica") Long idDocumentoPersonaJuridica, Model uiModel) {
        populateEditForm(uiModel, DocumentoPersonaJuridica.findDocumentoPersonaJuridica(idDocumentoPersonaJuridica));
        return "documentopersonajuridicas/update";
    }
    
    @RequestMapping(value = "/{idDocumentoPersonaJuridica}", method = RequestMethod.DELETE, produces = "text/html")
    public String DocumentoPersonaJuridicaController.delete(@PathVariable("idDocumentoPersonaJuridica") Long idDocumentoPersonaJuridica, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        DocumentoPersonaJuridica documentoPersonaJuridica = DocumentoPersonaJuridica.findDocumentoPersonaJuridica(idDocumentoPersonaJuridica);
        documentoPersonaJuridica.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/documentopersonajuridicas";
    }
    
    void DocumentoPersonaJuridicaController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("documentoPersonaJuridica_fechavigencia_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("documentoPersonaJuridica_fechacreacion_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("documentoPersonaJuridica_fechamodificacion_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void DocumentoPersonaJuridicaController.populateEditForm(Model uiModel, DocumentoPersonaJuridica documentoPersonaJuridica) {
        uiModel.addAttribute("documentoPersonaJuridica", documentoPersonaJuridica);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("personasjuridicases", PersonasJuridicas.findAllPersonasJuridicases());
        uiModel.addAttribute("tipodocumentoes", TipoDocumento.findAllTipoDocumentoes());
    }
    
    String DocumentoPersonaJuridicaController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
