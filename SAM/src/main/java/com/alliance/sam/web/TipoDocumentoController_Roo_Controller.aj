// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.alliance.sam.web;

import com.alliance.sam.DocumentoPersonaFisica;
import com.alliance.sam.DocumentoPersonaJuridica;
import com.alliance.sam.PersonasFisicas;
import com.alliance.sam.TipoDocumento;
import com.alliance.sam.web.TipoDocumentoController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect TipoDocumentoController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String TipoDocumentoController.create(@Valid TipoDocumento tipoDocumento, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, tipoDocumento);
            return "tipodocumentoes/create";
        }
        uiModel.asMap().clear();
        tipoDocumento.persist();
        return "redirect:/tipodocumentoes/" + encodeUrlPathSegment(tipoDocumento.getIdDocumentoTipo().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String TipoDocumentoController.createForm(Model uiModel) {
        populateEditForm(uiModel, new TipoDocumento());
        return "tipodocumentoes/create";
    }
    
    @RequestMapping(value = "/{idDocumentoTipo}", produces = "text/html")
    public String TipoDocumentoController.show(@PathVariable("idDocumentoTipo") Long idDocumentoTipo, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("tipodocumento", TipoDocumento.findTipoDocumento(idDocumentoTipo));
        uiModel.addAttribute("itemId", idDocumentoTipo);
        return "tipodocumentoes/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String TipoDocumentoController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("tipodocumentoes", TipoDocumento.findTipoDocumentoEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) TipoDocumento.countTipoDocumentoes() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("tipodocumentoes", TipoDocumento.findAllTipoDocumentoes(sortFieldName, sortOrder));
        }
        addDateTimeFormatPatterns(uiModel);
        return "tipodocumentoes/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String TipoDocumentoController.update(@Valid TipoDocumento tipoDocumento, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, tipoDocumento);
            return "tipodocumentoes/update";
        }
        uiModel.asMap().clear();
        tipoDocumento.merge();
        return "redirect:/tipodocumentoes/" + encodeUrlPathSegment(tipoDocumento.getIdDocumentoTipo().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{idDocumentoTipo}", params = "form", produces = "text/html")
    public String TipoDocumentoController.updateForm(@PathVariable("idDocumentoTipo") Long idDocumentoTipo, Model uiModel) {
        populateEditForm(uiModel, TipoDocumento.findTipoDocumento(idDocumentoTipo));
        return "tipodocumentoes/update";
    }
    
    @RequestMapping(value = "/{idDocumentoTipo}", method = RequestMethod.DELETE, produces = "text/html")
    public String TipoDocumentoController.delete(@PathVariable("idDocumentoTipo") Long idDocumentoTipo, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        TipoDocumento tipoDocumento = TipoDocumento.findTipoDocumento(idDocumentoTipo);
        tipoDocumento.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/tipodocumentoes";
    }
    
    void TipoDocumentoController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("tipoDocumento_fechacreacion_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("tipoDocumento_fechamodificacion_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void TipoDocumentoController.populateEditForm(Model uiModel, TipoDocumento tipoDocumento) {
        uiModel.addAttribute("tipoDocumento", tipoDocumento);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("documentopersonafisicas", DocumentoPersonaFisica.findAllDocumentoPersonaFisicas());
        uiModel.addAttribute("documentopersonajuridicas", DocumentoPersonaJuridica.findAllDocumentoPersonaJuridicas());
        uiModel.addAttribute("personasfisicases", PersonasFisicas.findAllPersonasFisicases());
    }
    
    String TipoDocumentoController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
