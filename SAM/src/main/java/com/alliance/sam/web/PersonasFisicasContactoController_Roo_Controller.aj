// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.alliance.sam.web;

import com.alliance.sam.PersonasFisicas;
import com.alliance.sam.PersonasFisicasContacto;
import com.alliance.sam.TipoContacto;
import com.alliance.sam.web.PersonasFisicasContactoController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect PersonasFisicasContactoController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String PersonasFisicasContactoController.create(@Valid PersonasFisicasContacto personasFisicasContacto, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, personasFisicasContacto);
            return "personasfisicascontactoes/create";
        }
        uiModel.asMap().clear();
        personasFisicasContacto.persist();
        return "redirect:/personasfisicascontactoes/" + encodeUrlPathSegment(personasFisicasContacto.getIdPersonasFisicasContacto().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String PersonasFisicasContactoController.createForm(Model uiModel) {
        populateEditForm(uiModel, new PersonasFisicasContacto());
        return "personasfisicascontactoes/create";
    }
    
    @RequestMapping(value = "/{idPersonasFisicasContacto}", produces = "text/html")
    public String PersonasFisicasContactoController.show(@PathVariable("idPersonasFisicasContacto") Integer idPersonasFisicasContacto, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("personasfisicascontacto", PersonasFisicasContacto.findPersonasFisicasContacto(idPersonasFisicasContacto));
        uiModel.addAttribute("itemId", idPersonasFisicasContacto);
        return "personasfisicascontactoes/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String PersonasFisicasContactoController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("personasfisicascontactoes", PersonasFisicasContacto.findPersonasFisicasContactoEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) PersonasFisicasContacto.countPersonasFisicasContactoes() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("personasfisicascontactoes", PersonasFisicasContacto.findAllPersonasFisicasContactoes(sortFieldName, sortOrder));
        }
        addDateTimeFormatPatterns(uiModel);
        return "personasfisicascontactoes/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String PersonasFisicasContactoController.update(@Valid PersonasFisicasContacto personasFisicasContacto, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, personasFisicasContacto);
            return "personasfisicascontactoes/update";
        }
        uiModel.asMap().clear();
        personasFisicasContacto.merge();
        return "redirect:/personasfisicascontactoes/" + encodeUrlPathSegment(personasFisicasContacto.getIdPersonasFisicasContacto().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{idPersonasFisicasContacto}", params = "form", produces = "text/html")
    public String PersonasFisicasContactoController.updateForm(@PathVariable("idPersonasFisicasContacto") Integer idPersonasFisicasContacto, Model uiModel) {
        populateEditForm(uiModel, PersonasFisicasContacto.findPersonasFisicasContacto(idPersonasFisicasContacto));
        return "personasfisicascontactoes/update";
    }
    
    @RequestMapping(value = "/{idPersonasFisicasContacto}", method = RequestMethod.DELETE, produces = "text/html")
    public String PersonasFisicasContactoController.delete(@PathVariable("idPersonasFisicasContacto") Integer idPersonasFisicasContacto, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        PersonasFisicasContacto personasFisicasContacto = PersonasFisicasContacto.findPersonasFisicasContacto(idPersonasFisicasContacto);
        personasFisicasContacto.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/personasfisicascontactoes";
    }
    
    void PersonasFisicasContactoController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("personasFisicasContacto_vigencia_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("personasFisicasContacto_fechacreacion_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("personasFisicasContacto_fechamodificacion_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void PersonasFisicasContactoController.populateEditForm(Model uiModel, PersonasFisicasContacto personasFisicasContacto) {
        uiModel.addAttribute("personasFisicasContacto", personasFisicasContacto);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("personasfisicases", PersonasFisicas.findAllPersonasFisicases());
        uiModel.addAttribute("tipocontactoes", TipoContacto.findAllTipoContactoes());
    }
    
    String PersonasFisicasContactoController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
