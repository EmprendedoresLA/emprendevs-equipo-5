// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.alliance.sam.web;

import com.alliance.sam.CalculoFiltro;
import com.alliance.sam.TipoNombreTabla;
import com.alliance.sam.web.TipoNombreTablaController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect TipoNombreTablaController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String TipoNombreTablaController.create(@Valid TipoNombreTabla tipoNombreTabla, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, tipoNombreTabla);
            return "tiponombretablas/create";
        }
        uiModel.asMap().clear();
        tipoNombreTabla.persist();
        return "redirect:/tiponombretablas/" + encodeUrlPathSegment(tipoNombreTabla.getIdTipoNombreTabla().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String TipoNombreTablaController.createForm(Model uiModel) {
        populateEditForm(uiModel, new TipoNombreTabla());
        return "tiponombretablas/create";
    }
    
    @RequestMapping(value = "/{idTipoNombreTabla}", produces = "text/html")
    public String TipoNombreTablaController.show(@PathVariable("idTipoNombreTabla") Long idTipoNombreTabla, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("tiponombretabla", TipoNombreTabla.findTipoNombreTabla(idTipoNombreTabla));
        uiModel.addAttribute("itemId", idTipoNombreTabla);
        return "tiponombretablas/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String TipoNombreTablaController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("tiponombretablas", TipoNombreTabla.findTipoNombreTablaEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) TipoNombreTabla.countTipoNombreTablas() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("tiponombretablas", TipoNombreTabla.findAllTipoNombreTablas(sortFieldName, sortOrder));
        }
        addDateTimeFormatPatterns(uiModel);
        return "tiponombretablas/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String TipoNombreTablaController.update(@Valid TipoNombreTabla tipoNombreTabla, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, tipoNombreTabla);
            return "tiponombretablas/update";
        }
        uiModel.asMap().clear();
        tipoNombreTabla.merge();
        return "redirect:/tiponombretablas/" + encodeUrlPathSegment(tipoNombreTabla.getIdTipoNombreTabla().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{idTipoNombreTabla}", params = "form", produces = "text/html")
    public String TipoNombreTablaController.updateForm(@PathVariable("idTipoNombreTabla") Long idTipoNombreTabla, Model uiModel) {
        populateEditForm(uiModel, TipoNombreTabla.findTipoNombreTabla(idTipoNombreTabla));
        return "tiponombretablas/update";
    }
    
    @RequestMapping(value = "/{idTipoNombreTabla}", method = RequestMethod.DELETE, produces = "text/html")
    public String TipoNombreTablaController.delete(@PathVariable("idTipoNombreTabla") Long idTipoNombreTabla, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        TipoNombreTabla tipoNombreTabla = TipoNombreTabla.findTipoNombreTabla(idTipoNombreTabla);
        tipoNombreTabla.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/tiponombretablas";
    }
    
    void TipoNombreTablaController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("tipoNombreTabla_fechacreacion_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("tipoNombreTabla_fechamodificacion_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void TipoNombreTablaController.populateEditForm(Model uiModel, TipoNombreTabla tipoNombreTabla) {
        uiModel.addAttribute("tipoNombreTabla", tipoNombreTabla);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("calculofiltroes", CalculoFiltro.findAllCalculoFiltroes());
    }
    
    String TipoNombreTablaController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
