// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.alliance.sam.web;

import com.alliance.sam.Calculo;
import com.alliance.sam.CertificadoZonificacion;
import com.alliance.sam.DatosCatastro;
import com.alliance.sam.DatosPlaneamiento;
import com.alliance.sam.Ddjj;
import com.alliance.sam.DomicilioExpediente;
import com.alliance.sam.Expediente;
import com.alliance.sam.ExpedienteComercio;
import com.alliance.sam.ExpedienteDocumento;
import com.alliance.sam.ExpedienteEstado;
import com.alliance.sam.ExpedienteEstadoDeTramite;
import com.alliance.sam.ExpedienteExclusivoDireccion;
import com.alliance.sam.ExpedienteIndustria;
import com.alliance.sam.ExpedientePersonaFisica;
import com.alliance.sam.ExpedientePersonaJuridica;
import com.alliance.sam.ExpedienteRubro;
import com.alliance.sam.Inspeccion;
import com.alliance.sam.TipoAnio;
import com.alliance.sam.TipoEstablecimiento;
import com.alliance.sam.TipoGeneral;
import com.alliance.sam.VentaPresunta;
import com.alliance.sam.web.ExpedienteController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ExpedienteController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String ExpedienteController.create(@Valid Expediente expediente, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, expediente);
            return "expedientes/create";
        }
        uiModel.asMap().clear();
        expediente.persist();
        return "redirect:/expedientes/" + encodeUrlPathSegment(expediente.getIdExpedienteControl().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String ExpedienteController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Expediente());
        return "expedientes/create";
    }
    
    @RequestMapping(value = "/{idExpedienteControl}", produces = "text/html")
    public String ExpedienteController.show(@PathVariable("idExpedienteControl") Long idExpedienteControl, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("expediente", Expediente.findExpediente(idExpedienteControl));
        uiModel.addAttribute("itemId", idExpedienteControl);
        return "expedientes/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String ExpedienteController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("expedientes", Expediente.findExpedienteEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) Expediente.countExpedientes() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("expedientes", Expediente.findAllExpedientes(sortFieldName, sortOrder));
        }
        addDateTimeFormatPatterns(uiModel);
        return "expedientes/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String ExpedienteController.update(@Valid Expediente expediente, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, expediente);
            return "expedientes/update";
        }
        uiModel.asMap().clear();
        expediente.merge();
        return "redirect:/expedientes/" + encodeUrlPathSegment(expediente.getIdExpedienteControl().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{idExpedienteControl}", params = "form", produces = "text/html")
    public String ExpedienteController.updateForm(@PathVariable("idExpedienteControl") Long idExpedienteControl, Model uiModel) {
        populateEditForm(uiModel, Expediente.findExpediente(idExpedienteControl));
        return "expedientes/update";
    }
    
    @RequestMapping(value = "/{idExpedienteControl}", method = RequestMethod.DELETE, produces = "text/html")
    public String ExpedienteController.delete(@PathVariable("idExpedienteControl") Long idExpedienteControl, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Expediente expediente = Expediente.findExpediente(idExpedienteControl);
        expediente.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/expedientes";
    }
    
    void ExpedienteController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("expediente_baja_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("expediente_fechainicio_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("expediente_fechacreacion_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("expediente_fechamodificacion_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void ExpedienteController.populateEditForm(Model uiModel, Expediente expediente) {
        uiModel.addAttribute("expediente", expediente);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("calculoes", Calculo.findAllCalculoes());
        uiModel.addAttribute("certificadozonificacions", CertificadoZonificacion.findAllCertificadoZonificacions());
        uiModel.addAttribute("datoscatastroes", DatosCatastro.findAllDatosCatastroes());
        uiModel.addAttribute("datosplaneamientoes", DatosPlaneamiento.findAllDatosPlaneamientoes());
        uiModel.addAttribute("ddjjs", Ddjj.findAllDdjjs());
        uiModel.addAttribute("domicilioexpedientes", DomicilioExpediente.findAllDomicilioExpedientes());
        uiModel.addAttribute("expedientecomercios", ExpedienteComercio.findAllExpedienteComercios());
        uiModel.addAttribute("expedientedocumentoes", ExpedienteDocumento.findAllExpedienteDocumentoes());
        uiModel.addAttribute("expedienteestadoes", ExpedienteEstado.findAllExpedienteEstadoes());
        uiModel.addAttribute("expedienteestadodetramites", ExpedienteEstadoDeTramite.findAllExpedienteEstadoDeTramites());
        uiModel.addAttribute("expedienteexclusivodireccions", ExpedienteExclusivoDireccion.findAllExpedienteExclusivoDireccions());
        uiModel.addAttribute("expedienteindustrias", ExpedienteIndustria.findAllExpedienteIndustrias());
        uiModel.addAttribute("expedientepersonafisicas", ExpedientePersonaFisica.findAllExpedientePersonaFisicas());
        uiModel.addAttribute("expedientepersonajuridicas", ExpedientePersonaJuridica.findAllExpedientePersonaJuridicas());
        uiModel.addAttribute("expedienterubroes", ExpedienteRubro.findAllExpedienteRubroes());
        uiModel.addAttribute("inspeccions", Inspeccion.findAllInspeccions());
        uiModel.addAttribute("tipoanios", TipoAnio.findAllTipoAnios());
        uiModel.addAttribute("tipoestablecimientoes", TipoEstablecimiento.findAllTipoEstablecimientoes());
        uiModel.addAttribute("tipogenerals", TipoGeneral.findAllTipoGenerals());
        uiModel.addAttribute("ventapresuntas", VentaPresunta.findAllVentaPresuntas());
    }
    
    String ExpedienteController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
